name: New app release

env:
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.8.2
  SAM_SOURCE_DIR: ${{ github.workspace }}/src
  SAM_ARTIFACT_WITHOUT_ZIP_ENDING: stockApiManager
  SAM_BUILD_DIR_NAME: buildStockApiManager

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Get all tags for correct version determination
        working-directory: ${{ env.SOURCE_DIR }}
        run: |
          git fetch --all --tags -f

      - name: Try to cache the Qt-Installation
        id: cache-qt
        uses: actions/cache@v4
        env: 
          cache-name: cache-qt
        with:
          path: ${{ runner.temp }}/Qt
          key: ${{ runner.os }}-Qt-${{ env.QT_VERSION }}

      - if: ${{ steps.cache-qt.outputs.cache-hit != 'true' }}
        name: Setup Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: desktop
          dir: ${{ runner.temp }}
          setup-pyqt: false
          modules: qtwebsockets qtconnectivity

      - name: Set Qt environment variables
        run: |
          QT_PATH="${{ steps.qt-setup.outputs.qtPath }}"
          if [ -z "$QT_PATH" ]; then
            echo "qt-setup output is missing, using fallback path"
            QT_PATH="${{ runner.temp }}/Qt/${{ env.QT_VERSION }}"
          fi
          echo "QT_PATH=$QT_PATH" >> $GITHUB_ENV

      - name: Install FFTW3
        run: |
          sudo apt-get update
          sudo apt-get install -y libfftw3-dev

      - name: Configure CMake
        run:
            cd ${{ env.QT_PATH }}/gcc_64/lib/cmake/Qt6
            ls
            cmake -S . -B ${{ runner.temp }}/${{ env.SAM_BUILD_DIR_NAME }} \
            -DQt6_DIR=${{ env.QT_PATH }}/gcc_64/lib/cmake/Qt6  \
            -DCMAKE_PREFIX_PATH=${{ env.QT_PATH }}/gcc_64
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build
        run: cmake --build ${{ runner.temp }}/${{ env.SAM_BUILD_DIR_NAME }} -- -j $(nproc)

      - name: Prepare build Artifact (delete unnecessary files)
        working-directory: ${{ runner.temp }}/${{ env.SAM_BUILD_DIR_NAME }}
        run: |
          rm -f imports/${{ env.SAM_ARTIFACT_WITHOUT_ZIP_ENDING }}/*.pdb
          rm -f imports/${{ env.SAM_ARTIFACT_WITHOUT_ZIP_ENDING }}/*.exp
          rm -f imports/${{ env.SAM_ARTIFACT_WITHOUT_ZIP_ENDING }}/*.ilk
          rm -f imports/${{ env.SAM_ARTIFACT_WITHOUT_ZIP_ENDING }}/*.lib
      
      - name: Save the build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SAM_ARTIFACT_WITHOUT_ZIP_ENDING }}
          path: ${{ runner.temp }}/${{ env.SAM_BUILD_DIR_NAME }}



      - name: Install analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy cppcheck

      - name: Run clang-tidy
        run: |
          find src/ -path "src/libs" -prune -o -type f -name "*.cpp" -print | while read file; do
            echo "Analyzing $file"
            clang-tidy "$file" -p ${{ runner.temp }}/${{ env.SAM_BUILD_DIR_NAME }} 2>&1
          done > clang-tidy-report.txt
          
      - name: Run cppcheck
        run: |
          cppcheck --enable=all --inconclusive --std=c++17 \
            -I ${{ env.SAM_SOURCE_DIR }} \
            -i src/libs \
            src/ 2> cppcheck-report.txt
          
      # Upload analysis reports for review
      - name: Upload analysis reports
        uses: actions/upload-artifact@v4
        with:
          name: analysis-reports
          path: |
            clang-tidy-report.txt
            cppcheck-report.txt
